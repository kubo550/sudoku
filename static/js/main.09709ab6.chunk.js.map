{"version":3,"sources":["hooks/useTimmer.ts","utils/createSudoku.ts","components/Cell/Cell.style.ts","components/Cell/Cell.tsx","utils/play.ts","components/Stats/Stats.style.ts","components/Stats/Stats.tsx","components/Articles/Articles.style.ts","components/Articles/data.ts","components/Articles/Articles.tsx","components/Controlers/Controlers.style.ts","components/Controlers/Controlers.tsx","components/Footer/Footer.style.ts","components/Footer/Footer.tsx","App.tsx","index.tsx"],"names":["timeInterval","POSIBILITIES","Object","freeze","hasEmptySpots","board","some","row","cell","calculateSquareIdx","x","y","Math","floor","matrixArray","map","_","colIdx","squareBoard","newBoard","c","r","push","getPosibilities","resolvingBoard","cloneDeep","z","allHorizontals","filter","Boolean","allVerticals","allSquares","uniq","num","includes","fillingBoard","length","posibilities","size","head","getPlayableBoard","resolvedBoard","value","pos","readOnly","correct","Cell","styled","div","borderTop","borderLeft","readonly","isCorrect","isHover","isCurrentSpot","isHighlightedNum","click","activeSpot","highlightedNum","isWin","isBorderTop","isBorderLeft","completedRow","every","tile","completedCol","completedSquare","completedSudoku","onClick","className","ARROWS","NUMBERS","getNewSpot","activeSpots","coords","isAllOfNumber","counter","forEach","Wrapper","Stats","startCount","isCounting","stopCount","time","disableScroll","e","key","preventDefault","useEffect","window","addEventListener","removeEventListener","id","type","articles","title","content","Articles","article","NumberBtn","hidden","NewGameBtn","button","Controlers","erase","hint","typeNumber","newGame","completedNums","isHidden","footer","Footer","decimal","toString","padStart","displayTime","Number","mn","sc","useTimmer","timeInSeconds","useState","setTime","setisCounting","setInterval","prev","clearInterval","timeToDisplay","restartCount","initialBoard","initialIndexes","resolvedSudoku","resolved","fuse","Error","resolvingSudoku","App","initialSudoku","setBoard","setActiveSpot","setHighlightedNum","setCompletedNums","isGameOver","setisGameOver","useCallback","getHint","win","removeValue","enterNumber","activeIndexes","isValidField","spot","isThisSpot","completedNumbers","i","calculateCompletedNums","handleKeydown","arrow","newSpot","inRange","isCorrectCoords","document","handleClick","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.09709ab6.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\nconst decimal = (num: number): string => num.toString().padStart(2, \"0\");\r\n\r\nconst displayTime = (time: number | null): string => {\r\n    const secondsInMin = 60\r\n    time = Number(time)\r\n    if (time < 0) {\r\n        return `00:00`\r\n    }\r\n    const mn = Math.floor(time / secondsInMin);\r\n    const sc = time % secondsInMin;\r\n    return `${decimal(mn)}:${decimal(sc)}`;\r\n};\r\n\r\nlet timeInterval: NodeJS.Timeout;\r\n\r\nconst useTimmer = (timeInSeconds?: number) => {\r\n    const [time, setTime] = useState(timeInSeconds || 0);\r\n    const [isCounting, setisCounting] = useState(true)\r\n\r\n    const startCount = (): void => {\r\n        setisCounting(true)\r\n        timeInterval = setInterval(() => {\r\n            setTime(prev => Number(prev) + 1);\r\n        }, 1000);\r\n    };\r\n\r\n    const stopCount = (): void => {\r\n        clearInterval(timeInterval);\r\n        setisCounting(false)\r\n    }\r\n\r\n    const restartCount = (): void => {\r\n        stopCount();\r\n        setTime(0);\r\n    }\r\n\r\n    useEffect(() => {\r\n        startCount();\r\n        return () => stopCount();\r\n    }, []);\r\n\r\n    const timeToDisplay = displayTime(time)\r\n\r\n    return { time, stopCount, startCount, restartCount, displayTime, timeToDisplay, isCounting }\r\n\r\n}\r\n\r\nexport default useTimmer","import _ from \"lodash\";\r\nimport { Index, Indexes, SudokuField } from \"../types\";\r\n\r\nconst POSIBILITIES = Object.freeze([1, 2, 3, 4, 5, 6, 7, 8, 9]);\r\nconst SAFE_NUMBER = 100;\r\n\r\nconst hasEmptySpots = (board: number[][]) =>\r\n    board.some(row => row.some(cell => cell === 0));\r\n\r\nexport const calculateSquareIdx = (x: number, y: number): Index => {\r\n    const heightIdx = Math.floor(x / 3) * 3;\r\n    const widthIdx = Math.floor(y / 3);\r\n\r\n    return heightIdx + widthIdx as Index;\r\n};\r\n\r\nexport const matrixArray = <T>(board: T[][]): T[][] =>\r\n    board[0].map((_, colIdx) => board.map(row => row[colIdx]));\r\n\r\nexport const squareBoard = <T>(board: T[][]): T[][] => {\r\n    const newBoard: T[][] = [];\r\n\r\n    for (let c = 0; c < 3; c++) {\r\n        for (let r = 0; r < 3; r++) {\r\n            const row: T[] = [];\r\n\r\n            for (let x = 0; x < 3; x++) {\r\n                for (let y = 0; y < 3; y++) {\r\n                    row.push(board[(c % 3) * 3 + x][(r % 3) * 3 + y]);\r\n                }\r\n            }\r\n            newBoard.push(row);\r\n        }\r\n    }\r\n    return newBoard;\r\n};\r\n\r\nconst getPosibilities = (board: number[][], x: number, y: number): number[] => {\r\n    const resolvingBoard = _.cloneDeep(board);\r\n    const z = calculateSquareIdx(x, y);\r\n\r\n    const allHorizontals = resolvingBoard[x].filter(Boolean);\r\n    const allVerticals = matrixArray(resolvingBoard)[y].filter(Boolean);\r\n    const allSquares = squareBoard(resolvingBoard)[z].filter(Boolean);\r\n\r\n    const uniq = _.uniq([...allHorizontals, ...allVerticals, ...allSquares]);\r\n\r\n    return POSIBILITIES.filter(num => !uniq.includes(num));\r\n};\r\n\r\nconst fillingBoard = (board: number[][]): number[][] => {\r\n    const resolvingBoard = _.cloneDeep(board);\r\n\r\n    for (let x = 0; x < board.length; x++) {\r\n        for (let y = 0; y < board[0].length; y++) {\r\n            if (board[x][y] !== 0) {\r\n                continue;\r\n            }\r\n\r\n            const posibilities = getPosibilities(resolvingBoard, x, y);\r\n\r\n            if (_.size(posibilities) === 1) {\r\n                resolvingBoard[x][y] = _.head(posibilities)!;\r\n            }\r\n        }\r\n    }\r\n    return resolvingBoard;\r\n};\r\n\r\nexport const resolvingSudoku = (board: number[][]): number[][] => {\r\n    let resolved = fillingBoard(board);\r\n    let fuse = 0;\r\n\r\n    while (hasEmptySpots(resolved) && fuse < SAFE_NUMBER) {\r\n        resolved = fillingBoard(resolved);\r\n        // console.log(fuse);\r\n\r\n        fuse++;\r\n    }\r\n\r\n    if (hasEmptySpots(resolved)) {\r\n        throw Error(\"Too hard for me.\");\r\n    }\r\n\r\n    return resolved;\r\n};\r\n\r\nexport const getPlayableBoard = (\r\n    board: number[][],\r\n    resolvedBoard: number[][]\r\n): SudokuField[][] => {\r\n    const cloned = _.cloneDeep(board);\r\n\r\n    const playableBoard = cloned.map((row, x) =>\r\n        row.map((value, y) => ({\r\n            value,\r\n            pos: {\r\n                x,\r\n                y,\r\n                z: calculateSquareIdx(x, y)\r\n            } as Indexes,\r\n            readOnly: value !== 0,\r\n            correct: value !== 0 ? value : resolvedBoard[x][y],\r\n        }))\r\n    );\r\n    return playableBoard;\r\n};","import styled from \"styled-components\";\r\n\r\ninterface CellProps {\r\n  readonly: boolean;\r\n  borderTop: boolean;\r\n  borderLeft: boolean;\r\n  isHover: boolean;\r\n  isCorrect: boolean;\r\n  isCurrentSpot: boolean;\r\n  isHighlightedNum: boolean;\r\n}\r\n\r\nexport const Cell = styled.div<CellProps>`\r\n  border: 1px inset black;\r\n  border-top: ${({ borderTop }) => borderTop && \"3px inset black\"};\r\n  border-left: ${({ borderLeft }) => borderLeft && \"3px inset black\"};\r\n  color: ${({ readonly, isCorrect }) =>\r\n    readonly ? \"#000\" : isCorrect ? \"blue\" : \"red\"};\r\n  background-color: ${({ isHover, isCurrentSpot, isHighlightedNum }) => isCurrentSpot ? 'rgba(0, 0, 0, 0.35)' : isHighlightedNum ? \"rgba(0,132,0,0.25)\" : isHover ? \"rgba(0,0,0,0.15)\" : ''};\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  user-select: none;\r\n  width: 35px;\r\n  height: 35px;\r\n  font-size: 1.3rem;\r\n\r\n  @media (min-width: 620px) {\r\n    width: 50px;\r\n    height: 50px;\r\n    font-size: 1.9rem;\r\n  }\r\n\r\n`;","import { FC } from \"react\";\r\nimport { Indexes, SudokuField } from \"../../types\";\r\nimport { matrixArray, squareBoard } from \"../../utils/createSudoku\";\r\nimport * as S from \"./Cell.style\";\r\n\r\ninterface CellProps {\r\n  click: () => void;\r\n  cell: SudokuField;\r\n  activeSpot: Indexes;\r\n  highlightedNum: number | null;\r\n  board: SudokuField[][];\r\n  isWin: boolean;\r\n}\r\n\r\nconst Cell: FC<CellProps> = ({\r\n  cell,\r\n  click,\r\n  activeSpot,\r\n  highlightedNum,\r\n  board,\r\n  isWin,\r\n}) => {\r\n  const isHover =\r\n    activeSpot.x === cell.pos.x ||\r\n    activeSpot.y === cell.pos.y ||\r\n    activeSpot.z === cell.pos.z;\r\n\r\n  const isCurrentSpot =\r\n    activeSpot.x === cell.pos.x && activeSpot.y === cell.pos.y;\r\n\r\n  const isBorderTop = cell.pos.x !== 0 && cell.pos.x % 3 === 0;\r\n  const isBorderLeft = cell.pos.y !== 0 && cell.pos.y % 3 === 0;\r\n\r\n  const completedRow = board[cell.pos.x].every(\r\n    tile => tile.correct === tile.value\r\n  );\r\n\r\n  const completedCol = matrixArray(board)[cell.pos.y].every(\r\n    tile => tile.correct === tile.value\r\n  );\r\n\r\n  const completedSquare = squareBoard(board)[cell.pos.z].every(\r\n    tile => tile.correct === tile.value\r\n  );\r\n\r\n  const completedSudoku = isWin;\r\n\r\n  // todo Repair animation\r\n\r\n  return (\r\n    <S.Cell\r\n      onClick={click}\r\n      borderTop={isBorderTop}\r\n      borderLeft={isBorderLeft}\r\n      readonly={cell.readOnly}\r\n      isHover={isHover}\r\n      isCurrentSpot={isCurrentSpot}\r\n      isCorrect={cell.value === cell.correct}\r\n      isHighlightedNum={cell.value === highlightedNum}\r\n      className={`${completedRow ? \"completedRow\" : \"\"} ${\r\n        completedCol ? \"completedCol\" : \"\"\r\n      } ${completedSquare ? \"completedSquare\" : \"\"} ${\r\n        completedSudoku ? \"completedSudoku\" : \"\"\r\n      }\r\n      `}\r\n    >\r\n      {cell.value ? cell.value : \"\"}\r\n    </S.Cell>\r\n  );\r\n};\r\n\r\nexport default Cell;\r\n","import _ from \"lodash\"\r\nimport { Arrow, Coords, Indexes, SudokuField, Value } from \"../types\";\r\nimport { calculateSquareIdx } from \"./createSudoku\";\r\n\r\nexport const ARROWS: Arrow[] = [\"ArrowRight\", \"ArrowLeft\", \"ArrowUp\", \"ArrowDown\"];\r\nexport const NUMBERS = [...'123456789']\r\n\r\n\r\nexport const calculateCoords = (arrow: Arrow) => {\r\n    if (arrow === \"ArrowRight\") return { x: 0, y: 1 }\r\n    else if (arrow === \"ArrowLeft\") return { x: 0, y: -1 }\r\n    else if (arrow === \"ArrowUp\") return { x: -1, y: 0 }\r\n    else if (arrow === \"ArrowDown\") return { x: 1, y: 0 }\r\n    else return { x: 0, y: 0 }\r\n}\r\n\r\nexport const isValidField = (board: SudokuField[][], activeIndexes: Indexes): boolean => {\r\n    const { x, y } = activeIndexes;\r\n\r\n    return !board[x][y].readOnly;\r\n};\r\n\r\n// todo refactor\r\nexport const getNewSpot = (activeSpots: Indexes, coords: Coords) => ({\r\n    x: activeSpots.x + coords.x,\r\n    y: activeSpots.y + coords.y,\r\n    z: calculateSquareIdx(activeSpots.x + coords.x, activeSpots.y + coords.y)\r\n}) as Indexes\r\n\r\nexport const isCorrectCoords = (activeSpots: Indexes, coords: Coords) => {\r\n    const newSpot = getNewSpot(activeSpots, coords);\r\n    return _.inRange(newSpot.x, 0, 9) && _.inRange(newSpot.y, 0, 9)\r\n}\r\n\r\nexport const isThisSpot = (spot: Indexes, x: number, y: number): boolean =>\r\n    spot.x === x && spot.y === y;\r\n\r\nexport const removeValue = (board: SudokuField[][], activeSpot: Indexes): SudokuField[][] => {\r\n    const newBoard = _.cloneDeep(board);\r\n    const { x, y } = activeSpot;\r\n    if (newBoard[x][y].readOnly) { return board }\r\n    newBoard[x][y].value = 0;\r\n    return newBoard\r\n}\r\n\r\nexport const getHint = (board: SudokuField[][], activeSpot: Indexes): SudokuField[][] => {\r\n    const newBoard = _.cloneDeep(board);\r\n    const { x, y } = activeSpot;\r\n\r\n    if (newBoard[x][y].value !== 0) { return board }\r\n\r\n    newBoard[x][y].value = newBoard[x][y].correct;\r\n    newBoard[x][y].readOnly = true;\r\n\r\n    return newBoard\r\n}\r\n\r\nconst isAllOfNumber = (num: Value, board: SudokuField[][]) => {\r\n    let counter = 0;\r\n\r\n    [...board].forEach(row =>\r\n        row.forEach(cell => {\r\n            if (cell.value === num && cell.value === cell.correct) {\r\n                counter += 1;\r\n            }\r\n        })\r\n    );\r\n\r\n    return counter === 9;\r\n};\r\nexport const calculateCompletedNums = (board: SudokuField[][]): Value[] => {\r\n    const completedNumbers = [];\r\n\r\n    for (let i = 1; i < 10; i++) {\r\n        if (isAllOfNumber(i, board)) {\r\n            completedNumbers.push(i);\r\n        }\r\n    }\r\n\r\n    return completedNumbers;\r\n};\r\n\r\nexport const isWin = (board: SudokuField[][]) => board.every(row => row.every(cell => cell.value === cell.correct))","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    justify-content: space-between;\r\n    margin: 0 auto;\r\n    max-width: 100%;\r\n    margin-bottom: 10px ;\r\n    \r\n    \r\n        @media (min-width: 620px) {\r\n            min-width: 456px;\r\n            width: 90%;\r\n            margin-bottom: 20px;\r\n        }\r\n        \r\n    div {\r\n        text-align: center;\r\n    }\r\n\r\n    #auto-check {\r\n        display: none;\r\n        \r\n        @media (min-width: 620px) {\r\n        display: inline-block;\r\n    }\r\n    }\r\n\r\n`","import { FC, useEffect } from \"react\";\r\nimport { ARROWS } from \"../../utils/play\";\r\nimport * as S from \"./Stats.style\";\r\n\r\ninterface StatsProps {\r\n  time: string;\r\n  isCounting: boolean;\r\n  startCount: () => void;\r\n  stopCount: () => void;\r\n}\r\n\r\nconst Stats: FC<StatsProps> = ({ startCount, isCounting, stopCount, time }) => {\r\n  const disableScroll = (e: KeyboardEvent) => {\r\n    if ([...ARROWS, \"Space\"].includes(e.key)) {\r\n      e.preventDefault();\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    window.addEventListener(\"keydown\", disableScroll);\r\n\r\n    return () => window.removeEventListener(\"keydown\", disableScroll);\r\n  }, []);\r\n\r\n  return (\r\n    <S.Wrapper>\r\n      <div>\r\n        Difficulty:\r\n        <select>\r\n          <option value='easy'>easy</option>\r\n          <option value='medium'>medium</option>\r\n          <option value='hard'>hard</option>\r\n        </select>\r\n      </div>\r\n\r\n      <div>\r\n        Auto-Ceck<span id='auto-check'> For Mistakes </span>\r\n        <input type='checkbox' />\r\n      </div>\r\n\r\n      <div>\r\n        {time} {isCounting && <button onClick={stopCount}> || </button>}\r\n        {!isCounting && <button onClick={startCount}> &gt; </button>}\r\n      </div>\r\n    </S.Wrapper>\r\n  );\r\n};\r\n\r\nexport default Stats;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n    margin-top: 30px;\r\n    display: flex;\r\n    flex-direction: column;\r\n \r\n    @media (min-width: 720px) {\r\n        margin-top: 70px;\r\n\r\n    }\r\n\r\n\r\n`","import { Article } from \"./types\"\r\n\r\nconst articles: Article[] = [\r\n  {\r\n    id: '1',\r\n    title: 'Play Free Sudoku Now!',\r\n    content: `Sudoku is one of the most popular games to develop your intelligence. Supposedly, it was invented in 1970 by Dell's puzzler in New York, who published it in his journal “Mathematical Puzzles and Logical Problems”. The further development to web Sudoku was held in Japan, where the name of the game was invented. In 2004, Sudoku was first published in the “Times” as an online game.`\r\n  },\r\n  {\r\n    id: '2',\r\n    title: 'About Sudoku',\r\n    content: `The goal of Sudoku is to fill the cells with numbers from 1 to 9. The numbers are placed in 9 squares, 3x3 each, thus, in each row, in each column and in each small square there are 9 cells. The same digit can be used only once in each separate column, each line and in each small square. The level of difficulty depends on how many digits are already indicated in the cells. If you open plenty of numbers - then you have very easy Sudoku.`\r\n  },\r\n  {\r\n    id: '3',\r\n    title: 'The advantages of easy web Sudoku',\r\n    content: `The advantage of online games on Sudoku.com is that the game is always available and you can use various useful features. You can receive hints, correct or delete the entered data, take notes and stop the time needed to solve the puzzle. If you need to interrupt the game, you can always press a pause button.`\r\n  },\r\n]\r\n\r\nexport default articles\r\n","import * as S from \"./Articles.style\";\r\nimport articles from \"./data\";\r\n\r\nconst Articles = () => {\r\n  return (\r\n    <S.Wrapper>\r\n      {articles.map(article => (\r\n        <article key={article.id}>\r\n          <h3> {article.title} </h3>\r\n          <p> {article.content} </p>\r\n        </article>\r\n      ))}\r\n    </S.Wrapper>\r\n  );\r\n};\r\n\r\nexport default Articles;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: space-evenly;\r\n  width: 100%;\r\n\r\n  margin: 0 5px;\r\n\r\n  .buttons {\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n\r\n    div {\r\n        background-color: #eaeef4;\r\n        padding: 5px;\r\n        transition: 0.3s ease all;\r\n        color: #0072e3;\r\n        border-radius: 50%;\r\n    \r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n    \r\n        &:hover {\r\n          cursor: pointer;\r\n          background-color: #d9cce3;\r\n        }\r\n        \r\n    }\r\n  }\r\n\r\n  .numbers {\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: space-evenly;\r\n\r\n    \r\n    @media (min-width: 780px) {\r\n      display: grid;\r\n      grid-template: repeat(3, 1fr) / repeat(3, 1fr);\r\n      gap: 5px;\r\n    }\r\n\r\n  }\r\n`;\r\n\r\ninterface NumberBtnProps {\r\n  hidden: boolean;\r\n}\r\n\r\nexport const NumberBtn = styled.div<NumberBtnProps>`\r\n\r\n  width: 100%;\r\n  color: blue;\r\n  transition: 0.3s ease background-color;\r\n  color: #0072e3;\r\n  \r\n  display: flex;\r\n  opacity: ${({ hidden }) => hidden ? '0' : '1'};\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-weight: 400;\r\n\r\n \r\n  @media (min-width: 780px) {\r\n    background-color: #eaeef4;\r\n    font-size: 3.4em;\r\n    font-weight: 300;\r\n    height: 2em;\r\n  }\r\n\r\n   @media (max-width: 960px) {\r\n    font-size: 2.4em;\r\n    height: 2em;\r\n  }\r\n\r\n\r\n  &:hover {\r\n    cursor: ${({ hidden }) => hidden ? 'default' : 'pointer'};\r\n  @media (min-width: 720px) {\r\n\r\n    background-color: #d9cce3;\r\n  }\r\n  }\r\n\r\n\r\n`\r\nexport const NewGameBtn = styled.button`\r\n  height: 60px;\r\n    margin-bottom: 20px;\r\n    border-radius: 5px;\r\n    background-color: #0072e3;\r\n    font-size: 20px;\r\n    font-weight: 600;\r\n    line-height: 60px;\r\n    vertical-align: middle;\r\n    text-align: center;\r\n    color: #fff;\r\n    transition: all .2s ease-in-out;\r\n    cursor: pointer;\r\n    outline: none;\r\n    border: none\r\n    \r\n`","import { FC } from \"react\";\r\nimport { Value } from \"../../types\";\r\nimport * as S from \"./Controlers.style\";\r\n\r\ninterface ControlersProps {\r\n  erase: () => void;\r\n  hint: () => void;\r\n  typeNumber: (value: number) => void;\r\n  newGame: () => void;\r\n  completedNums: Value[];\r\n  isWin: boolean;\r\n}\r\n\r\nconst Controlers: FC<ControlersProps> = ({\r\n  erase,\r\n  hint,\r\n  typeNumber,\r\n  newGame,\r\n  completedNums,\r\n  isWin,\r\n}) => {\r\n  const numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9];\r\n\r\n  return (\r\n    <S.Wrapper>\r\n      {!isWin && <S.NewGameBtn onClick={newGame}> NEW GAME </S.NewGameBtn>}\r\n\r\n      <div className='buttons'>\r\n        <div title='back'>back</div>\r\n        <div title='Or press Backspace key' onClick={erase}>\r\n          remove\r\n        </div>\r\n        <div title=\"Or press 'h' key\" onClick={hint}>\r\n          hint\r\n        </div>\r\n      </div>\r\n      {!isWin && (\r\n        <div className='numbers'>\r\n          {numbers.map(num => {\r\n            const isHidden = completedNums.includes(num);\r\n\r\n            return (\r\n              <S.NumberBtn\r\n                key={num}\r\n                hidden={isHidden}\r\n                onClick={isHidden ? () => {} : () => typeNumber(num)}\r\n              >\r\n                {num}\r\n              </S.NumberBtn>\r\n            );\r\n          })}\r\n        </div>\r\n      )}\r\n      {isWin && <S.NewGameBtn onClick={newGame}> NEW GAME </S.NewGameBtn>}\r\n    </S.Wrapper>\r\n  );\r\n};\r\n\r\nexport default Controlers;\r\n","import styled from \"styled-components\"\r\n\r\nexport const Wrapper = styled.footer`\r\n    width: 100vw;\r\n    height: 220px;\r\n    padding: 20px 50px;\r\n    background-color: #313131;\r\n    left: 0;\r\n`","import * as S from \"./Footer.style\";\r\n\r\nconst Footer = () => <S.Wrapper>footer</S.Wrapper>;\r\n\r\nexport default Footer;\r\n","import { useCallback, useEffect, useState } from \"react\";\nimport { Arrow, Indexes, SudokuField, Value } from \"./types\";\nimport { Articles, Cell, Controlers, Footer, Stats } from \"./components\";\n\nimport { resolvingSudoku, getPlayableBoard } from \"./utils/createSudoku\";\nimport {\n  ARROWS,\n  NUMBERS,\n  calculateCoords,\n  isThisSpot,\n  isValidField,\n  getNewSpot,\n  isCorrectCoords,\n  removeValue,\n  getHint,\n  calculateCompletedNums,\n  isWin,\n} from \"./utils/play\";\nimport useTimmer from \"./hooks/useTimmer\";\n\nconst initialBoard = [\n  [4, 0, 2, 6, 3, 8, 1, 0, 0],\n  [7, 8, 0, 9, 5, 0, 3, 0, 0],\n  [3, 1, 0, 0, 7, 2, 5, 0, 6],\n\n  [0, 7, 0, 1, 2, 3, 6, 5, 0],\n  [8, 0, 0, 7, 0, 0, 0, 0, 1],\n  [0, 0, 0, 0, 8, 0, 0, 0, 0],\n\n  [0, 4, 3, 8, 1, 0, 0, 0, 2],\n  [6, 0, 0, 0, 0, 4, 0, 1, 0],\n  [1, 9, 0, 0, 0, 5, 0, 0, 7],\n];\n\nconst initialIndexes: Indexes = { x: 0, y: 0, z: 0 };\n\nconst resolvedSudoku = resolvingSudoku(initialBoard);\n\nconst App = () => {\n  const initialSudoku = getPlayableBoard(initialBoard, resolvedSudoku);\n  const [board, setBoard] = useState<SudokuField[][]>(initialSudoku);\n  const [activeSpot, setActiveSpot] = useState<Indexes>(initialIndexes);\n  const [highlightedNum, setHighlightedNum] = useState<null | Value>(null);\n  const [completedNums, setCompletedNums] = useState<Value[]>([]);\n  const [isGameOver, setisGameOver] = useState(false);\n  const { timeToDisplay, isCounting, restartCount, startCount, stopCount } =\n    useTimmer();\n\n  const hint = useCallback(() => {\n    const newBoard = getHint(board, activeSpot);\n    setBoard(newBoard);\n    const win = isWin(newBoard);\n    win && stopCount();\n    setisGameOver(win);\n    setHighlightedNum(board[activeSpot.x][activeSpot.y].correct);\n  }, [activeSpot, board, stopCount]);\n\n  const erase = useCallback(() => {\n    setBoard(prev => removeValue(prev, activeSpot));\n    setHighlightedNum(null);\n  }, [activeSpot]);\n\n  const enterNumber = useCallback(\n    (value: Value) => {\n      if (!isValidField(board, activeSpot)) {\n        return;\n      }\n      setHighlightedNum(value);\n\n      const newBoard = board.map((row, x) =>\n        row.map((cell, y) =>\n          isThisSpot(activeSpot, x, y) ? { ...cell, value } : cell\n        )\n      );\n      setBoard(newBoard);\n\n      const completedNumbers = calculateCompletedNums(newBoard);\n      setCompletedNums(completedNumbers);\n\n      const win = isWin(newBoard);\n      setisGameOver(win);\n      win && stopCount();\n    },\n\n    [activeSpot, board, stopCount]\n  );\n\n  const newGame = () => {\n    // todo randomize new boards\n    const initialSudoku = getPlayableBoard(initialBoard, resolvedSudoku);\n    setBoard(initialSudoku);\n    setActiveSpot(initialIndexes);\n    setHighlightedNum(null);\n    restartCount();\n    setisGameOver(false);\n  };\n\n  const handleKeydown = useCallback(\n    (e: KeyboardEvent) => {\n      const { key } = e;\n\n      if (ARROWS.includes(key as Arrow)) {\n        const coords = calculateCoords(key as Arrow);\n        if (!isCorrectCoords(activeSpot, coords)) {\n          return;\n        }\n\n        const newSpot = getNewSpot(activeSpot, coords);\n        const { value } = board[newSpot.x][newSpot.y];\n\n        setHighlightedNum(value ? value : null);\n        setActiveSpot(newSpot);\n      } else if (NUMBERS.includes(key)) {\n        enterNumber(+key);\n      } else if (e.key === \"Backspace\") {\n        erase();\n      } else if (e.key === \"h\") {\n        hint();\n      }\n    },\n    [activeSpot, board, erase, hint, enterNumber]\n  );\n\n  useEffect(() => {\n    document.addEventListener(\"keydown\", handleKeydown);\n\n    return () => document.removeEventListener(\"keydown\", handleKeydown);\n  }, [handleKeydown]);\n\n  const handleClick = (cell: SudokuField) => {\n    setActiveSpot(cell.pos);\n    setHighlightedNum(cell.value ? cell.value : null);\n  };\n\n  return (\n    <div>\n      <div className='content'>\n        <h2>Sudoku Game</h2>\n        <Stats\n          isCounting={isCounting}\n          startCount={startCount}\n          stopCount={stopCount}\n          time={timeToDisplay}\n        />\n        <div className='game'>\n          <div className='board'>\n            {board.map((row, x) =>\n              row.map((cell, y) => (\n                <Cell\n                  key={`${x}${y}`}\n                  click={() => handleClick(cell)}\n                  cell={cell}\n                  activeSpot={activeSpot}\n                  highlightedNum={highlightedNum}\n                  board={board}\n                  isWin={isGameOver}\n                >\n                  {cell.value ? cell.value : \"\"}\n                </Cell>\n              ))\n            )}\n          </div>\n          <Controlers\n            erase={erase}\n            hint={hint}\n            typeNumber={enterNumber}\n            newGame={newGame}\n            completedNums={completedNums}\n            isWin={isGameOver}\n          />\n        </div>\n        <Articles />\n      </div>\n      <Footer />\n    </div>\n  );\n};\n\nexport default App;\n","import ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}